# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master # Trigger on push to the 'main' branch

# jobs:
#   build-frontend:
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the frontend code
#       - name: Checkout frontend code
#         uses: actions/checkout@v2
#         with:
#           path: frontend

#       # Set up AWS CLI
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       # Set up Docker
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1

#       # Log in to Amazon ECR for frontend
#       - name: Log in to Amazon ECR frontend
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}

#       # Build Docker image for frontend
#       - name: Build Docker image for frontend
#         run: |
#           docker build -t ${{ secrets.ECR_FRONTEND_REPO }}:latest frontend/

#       # Push Docker image to ECR for frontend
#       - name: Push Docker image to ECR frontend
#         run: |
#           docker push ${{ secrets.ECR_FRONTEND_REPO }}:latest

#   build-backend:
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the backend code
#       - name: Checkout backend code
#         uses: actions/checkout@v2
#         with:
#           path: backend

#       # Set up AWS CLI
#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: "${{ secrets.AWS_REGION }}"

#       # Log in to Amazon ECR for backend
#       - name: Log in to Amazon ECR backend
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}

#       # Build Docker image for backend
#       - name: Build Docker image for backend
#         run: |
#           docker build -t ${{ secrets.ECR_BACKEND_REPO }}:latest backend/

#       # Push Docker image to ECR for backend
#       - name: Push Docker image to ECR backend
#         run: |
#           docker push ${{ secrets.ECR_BACKEND_REPO }}:latest

#   deploy-frontend:
#     runs-on: ubuntu-latest
#     needs: build-frontend
#     steps:
#       # SSH into Frontend EC2 and deploy
#       - name: Deploy frontend to EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
#           username: ec2-user # Change to ubuntu if using Ubuntu
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           script: |
#             # Install Docker if not present
#             if ! command -v docker &> /dev/null; then
#               echo "Installing Docker..."
#               sudo yum update -y
#               sudo yum install -y docker
#               sudo service docker start
#               sudo usermod -aG docker $USER
#             fi

#             # Install AWS CLI if not present
#             if ! command -v aws &> /dev/null; then
#               echo "Installing AWS CLI..."
#               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#               unzip awscliv2.zip
#               sudo ./aws/install
#             fi

#             # Authenticate Docker to ECR
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}

#             # Pull the latest frontend image
#             docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest

#             # Run the frontend container on port 80
#             docker run -d -p 80:3000 --name frontend ${secrets.ECR_FRONTEND_REPO}:latest

#   deploy-backend:
#     runs-on: ubuntu-latest
#     needs: build-backend
#     steps:
#       # SSH into Backend EC2 and deploy
#       - name: Deploy backend to EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_BACKEND_PRIVATE_IP }}
#           username: ec2-user # Change to ubuntu if using Ubuntu
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           script: |
#             # Install Docker if not present
#             if ! command -v docker &> /dev/null; then
#               echo "Installing Docker..."
#               sudo yum update -y
#               sudo yum install -y docker
#               sudo service docker start
#               sudo usermod -aG docker $USER
#             fi

#             # Install AWS CLI if not present
#             if ! command -v aws &> /dev/null; then
#               echo "Installing AWS CLI..."
#               curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#               unzip awscliv2.zip
#               sudo ./aws/install
#             fi

#             # Authenticate Docker to ECR
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}

#             # Pull the latest backend image
#             docker pull ${{ secrets.ECR_BACKEND_REPO }}:latest

#             # Run the backend container on port 3001
#             docker run -d -p 3001:3001 --name backend ${secrets.ECR_BACKEND_REPO}:latest
name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v2
        with:
          path: frontend

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR (frontend)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}

      - name: Build and push frontend Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.ECR_FRONTEND_REPO }}:latest \
            --push ./frontend

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend code
        uses: actions/checkout@v2
        with:
          path: backend

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR (backend)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}

      - name: Build and push backend Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.ECR_BACKEND_REPO }}:latest \
            --push ./backend

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Deploy frontend to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker $USER
            fi

            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}
            docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest
            docker stop frontend || true && docker rm frontend || true
            docker run -d -p 80:3000 --name frontend ${{ secrets.ECR_FRONTEND_REPO }}:latest

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Deploy backend to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_BACKEND_PRIVATE_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker $USER
            fi

            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
            fi

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}
            docker pull ${{ secrets.ECR_BACKEND_REPO }}:latest
            docker stop backend || true && docker rm backend || true
            docker run -d -p 8080:8080 --name backend ${{ secrets.ECR_BACKEND_REPO }}:latest
