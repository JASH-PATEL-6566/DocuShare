# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-frontend:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout frontend code
#         uses: actions/checkout@v2

#       - uses: actions/setup-node@v3
#         with:
#           node-version: "12.22.0"

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Amazon ECR (frontend)
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}

#       - name: Build and push frontend Docker image
#         run: |
#           docker buildx create --use
#           docker buildx build --platform linux/amd64,linux/arm64 \
#             -t ${{ secrets.ECR_FRONTEND_REPO }}:latest \
#             --push ./frontend

#   build-backend:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout backend code
#         uses: actions/checkout@v2

#       - name: Set up AWS CLI
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Amazon ECR (backend)
#         run: |
#           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}

#       - name: Build and push backend Docker image
#         run: |
#           docker buildx create --use
#           docker buildx build --platform linux/amd64,linux/arm64 \
#             -t ${{ secrets.ECR_BACKEND_REPO }}:latest \
#             --push ./backend

#   deploy-frontend:
#     runs-on: ubuntu-latest
#     needs: build-frontend
#     steps:
#       - name: Deploy frontend to EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           script: |
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}
#             docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest
#             docker stop frontend || true && docker rm frontend || true
#             docker run -d -p 80:3000 --name frontend ${{ secrets.ECR_FRONTEND_REPO }}:latest

#   deploy-backend:
#     runs-on: ubuntu-latest
#     needs: build-backend
#     steps:
#       - name: Deploy frontend to EC2
#         uses: appleboy/ssh-action@v0.1.5
#         with:
#           host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
#           username: ec2-user
#           key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
#           script: |
#             aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}
#             docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest
#             docker stop backend || true && docker rm backend || true
#             docker run -d -p 3001:3001 --name backend ${{ secrets.ECR_FRONTEND_REPO }}:latest
name: Build, Push and Deploy

on:
  push:
    branches: [master]

env:
  AWS_REGION: us-east-2
  BASE_ECR_URL_BACKEND: 715841365404.dkr.ecr.us-east-2.amazonaws.com/docushare-backend:latest
  BASE_ECR_URL_FRONTEND: 715841365404.dkr.ecr.us-east-2.amazonaws.com/docushare-frontend:latest
  APP_ID: 715841365404

jobs:
  application:
    name: DocuShare Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "23"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || true

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: application
    steps:
      - name: SSH and deploy both containers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: 3.137.41.104
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            FRONTEND_IMAGE=${{ env.BASE_ECR_URL_FRONTEND }}:latest
            BACKEND_IMAGE=${{ env.BASE_ECR_URL_BACKEND }}:latest

            echo "Logging into ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.BASE_ECR_URL_FRONTEND }}
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.BASE_ECR_URL_BACKEND }}

            echo "Pulling images..."
            docker pull $FRONTEND_IMAGE
            docker pull $BACKEND_IMAGE

            echo "Stopping old containers..."
            docker stop docushare-frontend || true
            docker rm docushare-frontend || true
            docker stop docushare-backend || true
            docker rm docushare-backend || true

            echo "Starting Frontend container..."
            docker run -d --name docushare-frontend \
              -e NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }} \
              -e NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }} \
              -e NEXT_AWS_REGION=${{ secrets.NEXT_AWS_REGION }} \
              -e NEXT_AWS_BUCKET_NAME=${{ secrets.NEXT_AWS_BUCKET_NAME }} \
              -p 80:3000 \
              $FRONTEND_IMAGE

            echo "Starting Backend container..."
            docker run -d --name
