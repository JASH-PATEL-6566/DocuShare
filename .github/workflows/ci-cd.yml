name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frontend code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR (frontend)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}

      - name: Build and push frontend Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.ECR_FRONTEND_REPO }}:latest \
            --push ./frontend

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR (backend)
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_BACKEND_REPO }}

      - name: Build and push backend Docker image
        run: |
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.ECR_BACKEND_REPO }}:latest \
            --push ./backend

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Deploy frontend to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}
            docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest
            docker stop frontend || true && docker rm frontend || true
            docker run -d -p 80:3000 --name frontend ${{ secrets.ECR_FRONTEND_REPO }}:latest

  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Deploy frontend to EC2
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_FRONTEND_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_FRONTEND_REPO }}
            docker pull ${{ secrets.ECR_FRONTEND_REPO }}:latest
            docker stop backend || true && docker rm backend || true
            docker run -d -p 3001:3001 --name backend ${{ secrets.ECR_FRONTEND_REPO }}:latest
