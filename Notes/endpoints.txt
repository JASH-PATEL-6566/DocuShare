Perfect! Let's summarize **all updated REST API endpoints** for the **DocuShare** platform with **every feature** you've requested:

---

## üîê USER AUTH & ACCOUNT MANAGEMENT

| **Method** | **Endpoint**             | **Description**                            |
|------------|--------------------------|--------------------------------------------|
| `POST`     | `/auth/register`         | Register a new user                        |
| `POST`     | `/auth/login`            | Login and receive a token                  |
| `GET`      | `/auth/me`               | Get current user info (using token)        |

---

## üí≥ SUBSCRIPTION & USAGE MANAGEMENT

| **Method** | **Endpoint**                   | **Description**                                      |
|------------|--------------------------------|------------------------------------------------------|
| `GET`      | `/subscription/plan`           | Get current plan details (Free, Paid, etc.)         |
| `POST`     | `/subscription/upgrade`        | Initiate/upgrade a subscription (via Stripe/etc.)   |
| `GET`      | `/usage`                       | Get usage stats (number of uploads, links created)  |

---

## üìÅ FILE MANAGEMENT

| **Method** | **Endpoint**              | **Description**                              |
|------------|---------------------------|----------------------------------------------|
| `POST`     | `/files/upload-url`       | Get pre-signed S3 URL for file upload        |
| `POST`     | `/files/confirm-upload`   | Confirm upload, store metadata in DynamoDB   |
| `GET`      | `/files`                  | List user‚Äôs uploaded files                   |
| `DELETE`   | `/files/:fileId`          | Delete user‚Äôs file manually                  |

---

## üîó LINK GENERATION & ACCESS CONTROL

| **Method** | **Endpoint**                  | **Description**                                                        |
|------------|-------------------------------|------------------------------------------------------------------------|
| `POST`     | `/files/generate-link`        | Generate a secure shareable link with all constraints                 |
| `GET`      | `/links`                      | Get all links generated by the user                                   |
| `GET`      | `/links/:linkId`              | Get metadata & stats for a single link                                |
| `DELETE`   | `/links/:linkId`              | Manually delete a link                                                |

---

## üîì PUBLIC LINK ACCESS (End User Access)

| **Method** | **Endpoint**                        | **Description**                                                              |
|------------|-------------------------------------|------------------------------------------------------------------------------|
| `GET`      | `/access/:linkId`                   | Try accessing the file via link (checks expiry, limits, etc.)               |
| `POST`     | `/access/:linkId/verify`            | Submit password for password-protected link                                 |
| `GET`      | `/access/:linkId/file`              | If validated: View/download the file based on permission                    |

---

## ‚úÖ Link Constraints Supported

| **Constraint**              | Set at `POST /files/generate-link` | Enforced on Access (`/access/:linkId`) |
|----------------------------|-------------------------------------|----------------------------------------|
| Expiry Time (`expiryIn`)   | ‚úÖ Yes                              | ‚úÖ Yes                                 |
| Password Protection         | ‚úÖ Yes (`password`)                 | ‚úÖ Yes                                 |
| Max Downloads               | ‚úÖ Yes (`downloadLimit`)            | ‚úÖ Yes                                 |
| Allow Download              | ‚úÖ Yes (`allowDownload`)            | ‚úÖ Yes                                 |
| Max Opens/View Count        | ‚úÖ Yes (`viewLimit`)                | ‚úÖ Yes (stored as `viewsSoFar`)        |

---

## üóÉÔ∏è Example Payload: `/files/generate-link`

```json
{
  "fileId": "abc123",
  "expiryIn": "12h",
  "password": "secret123",
  "downloadLimit": 3,
  "viewLimit": 5,
  "allowDownload": false
}
```

---

## üß† DynamoDB Schema (per link)
```json
{
  "linkId": "uuid",
  "fileId": "abc123",
  "userId": "user1",
  "expiryTimestamp": "2025-04-07T00:00:00Z",
  "passwordHash": "bcrypt_hash",
  "downloadLimit": 3,
  "downloadsSoFar": 1,
  "viewLimit": 5,
  "viewsSoFar": 2,
  "allowDownload": false,
  "accessLogs": [ ... ]
}
```

---

Would you like me to help you:

- Write sample backend code for any of these endpoints? (Node.js / Python)
- Set up IAM roles for S3 & Lambda securely?
- Design how the frontend can handle password-prompt + download viewer?

Just say the word!